name: "NPM Package Version Bump"
description: "Bumps version of NPM package"
inputs:
  workDir:
    description: "Directory containing `package.json` file"
    required: false
    default: "."
runs:
  using: "composite"
  steps:
    - id: npm-version-bump
      shell: bash
      working-directory: ${{ inputs.workDir }}
      run: |
        set -x

        name=$(jq --raw-output .name package.json)
        version=$(jq --raw-output .version package.json)
        preid=$(echo $version | sed -e s/^.*-\\\([^.]*\\\).*$/\\1/)

        # Check resolved `preid`. Currently only `pre` value is supported,
        # other types of releases are not handled by this job.
        if [ "$preid" != pre ]; then
          echo "Unsupported preid. Resolved info:"
          echo "$name@$version ; preid $preid"
          exit 1
        fi

        # Find the latest published package version matching this preid.
        # Note that in jq, we wrap the result in an array and then flatten;
        # this is because npm show json contains a single string if there
        # is only one matching version, or an array if there are multiple,
        # and we want to look at an array always.
        latest_version=$(npm show -json "$name@^$version" version | jq --raw-output "[.] | flatten | .[-1]")
        latest_version=${latest_version:-$version}
        if [ -z $latest_version ]; then
          echo "Latest version calculation failed. Resolved info:"
          echo "$name@$version ; preid $preid"
          exit 1
        fi

        # Update package.json with the latest published package version matching this
        # preid to prepare for bumping.
        echo $(jq -M ".version=\"${latest_version}\"" package.json) > package.json

        # Bump without doing any git work. Versioning is a build-time action for us.
        # Consider including commit id? Would be +<commit id>.
        npm version prerelease --preid=$preid --no-git-tag-version
